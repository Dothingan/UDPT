

services:
  db:
    image: mysql:8.0
    container_name: medical_mysql_db
    restart: always
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: ${MYSQL_DATABASE}  # Sử dụng cú pháp đúng
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}  # Sử dụng cú pháp đúng
      MYSQL_CHARACTER_SET_SERVER: utf8mb4  # Thiết lập charset mặc định là utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci  # Thiết lập collation mặc định
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./medical_booking_db:/docker-entrypoint-initdb.d
    command: --host-cache-size=0
    networks:
      - medical_app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]  # Sử dụng cú pháp đúng
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
    container_name: medical_auth_service
    restart: always
    environment:
      DB_USER: ${DB_USER}  # Sử dụng cú pháp đúng
      DB_PASSWORD: ${DB_PASSWORD}  # Sử dụng cú pháp đúng
      DB_HOST: ${DB_HOST}  # Sử dụng cú pháp đúng
      DB_PORT: ${DB_PORT}  # Sử dụng cú pháp đúng
      DB_NAME: ${DB_NAME}  # Sử dụng cú pháp đúng
      JWT_SECRET: ${JWT_SECRET}  # Sử dụng cú pháp đúng
      NODE_ENV: production
    ports:
      - "3001:3001"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - medical_app_network

  doctor-service:
    build:
      context: ./backend/doctor-service
      dockerfile: Dockerfile
    container_name: medical_doctor_service
    restart: always
    environment:
      DB_USER: ${DB_USER}  # Sử dụng cú pháp đúng
      DB_PASSWORD: ${DB_PASSWORD}  # Sử dụng cú pháp đúng
      DB_HOST: ${DB_HOST}  # Sử dụng cú pháp đúng
      DB_PORT: ${DB_PORT}  # Sử dụng cú pháp đúng
      DB_NAME: ${DB_NAME}  # Sử dụng cú pháp đúng
      JWT_SECRET: ${JWT_SECRET}  # Sử dụng cú pháp đúng
      NODE_ENV: production
    ports:
      - "3002:3002"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - medical_app_network

  booking-service:
    build:
      context: ./backend/booking-service
      dockerfile: Dockerfile
    container_name: medical_booking_service
    restart: always
    environment:
      DB_USER: ${DB_USER}  # Sử dụng cú pháp đúng
      DB_PASSWORD: ${DB_PASSWORD}  # Sử dụng cú pháp đúng
      DB_HOST: ${DB_HOST}  # Sử dụng cú pháp đúng
      DB_PORT: ${DB_PORT}  # Sử dụng cú pháp đúng
      DB_NAME: ${DB_NAME}  # Sử dụng cú pháp đúng
      JWT_SECRET: ${JWT_SECRET}  # Sử dụng cú pháp đúng
      NODE_ENV: production
    ports:
      - "3003:3003"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - medical_app_network

  patient-service:
    build:
      context: ./backend/patient-service
      dockerfile: Dockerfile
    container_name: medical_patient_service
    restart: always
    environment:
      DB_USER: ${DB_USER}  # Sử dụng cú pháp đúng
      DB_PASSWORD: ${DB_PASSWORD}  # Sử dụng cú pháp đúng
      DB_HOST: ${DB_HOST}  # Sử dụng cú pháp đúng
      DB_PORT: ${DB_PORT}  # Sử dụng cú pháp đúng
      DB_NAME: ${DB_NAME}  # Sử dụng cú pháp đúng
      JWT_SECRET: ${JWT_SECRET}  # Sử dụng cú pháp đúng
      NODE_ENV: production
    ports:
      - "3004:3004"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - medical_app_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: medical_frontend
    restart: always
    ports:
      - "3000:3000"
    networks:
      - medical_app_network
    command:

# Định nghĩa mạng chung cho các service giao tiếp với nhau
networks:
  medical_app_network:
    driver: bridge

# Định nghĩa volume để lưu trữ dữ liệu MySQL một cách bền bỉ
volumes:
  mysql_data: