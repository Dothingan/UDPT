services:
  db:
    image: mysql:8.0
    container_name: medical_mysql_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_HOST_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - medical_app_network
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u", "${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
    container_name: medical_auth_service
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      DB_HOST: db
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DB_NAME: ${MYSQL_DATABASE}
      AUTH_SERVICE_PORT: 3001
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - medical_app_network

  doctor-service:
    build:
      context: ./backend/doctor-service
      dockerfile: Dockerfile
    container_name: medical_doctor_service
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      DB_HOST: db
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DB_NAME: ${MYSQL_DATABASE}
      DOCTOR_SERVICE_PORT: 3002
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - medical_app_network

  booking-service:
    build:
      context: ./backend/booking-service
      dockerfile: Dockerfile
    container_name: medical_booking_service
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      DB_HOST: db
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DB_NAME: ${MYSQL_DATABASE}
      BOOKING_SERVICE_PORT: 3003
      JWT_SECRET: ${JWT_SECRET}
      DOCTOR_SERVICE_URL: http://doctor-service:3002
    depends_on:
      db:
        condition: service_healthy
      doctor-service:
        condition: service_started
    networks:
      - medical_app_network

  patient-service:
    build:
      context: ./backend/patient-service
      dockerfile: Dockerfile
    container_name: medical_patient_service
    restart: unless-stopped
    ports:
      - "3004:3004"
    environment:
      DB_HOST: db
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DB_NAME: ${MYSQL_DATABASE}
      PATIENT_SERVICE_PORT: 3004
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - medical_app_network

networks:
  medical_app_network:
    driver: bridge

volumes:
  mysql_data:
